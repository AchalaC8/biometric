Project Requirements: Automated Attendance Notification System
This document outlines the functional and non-functional requirements for the Automated Attendance Notification System.

1. Functional Requirements
1.1 Data Processing
RF-1.1.1: The system SHALL read daily attendance data from a CSV file.
RF-1.1.2: The system SHALL dynamically identify the correct CSV file for the current day based on a consistent naming convention (e.g., `DD-Mon-YYYY.csv`).
RF-1.1.3: The system SHALL be able to parse data with the following columns: `Employee Code`, `Student Name`, `Block`, `Floor`, `Room No.`, `Last Punch`, `Punch Records`, and `Status`.
1.2 Absentee Identification
RF-1.2.1: The system SHALL accurately identify all students with a `Status` of "Not Present".
RF-1.2.2: The system SHALL also identify students who have `Last Punch` after a specified time threshold (e.g., 8:45 PM) as "Late".
1.3 Reporting
RF-1.3.1: The system SHALL generate an Excel file (`.xlsx`) containing multiple sheets for different reports.
RF-1.3.2: The Excel file SHALL include a sheet named "Daily Summary" with a count of total students, present students, absent students, and late students.
RF-1.3.3: The Excel file SHALL include a sheet named "Students to Notify" listing the details of all absent students.
RF-1.3.4: The Excel file SHALL include a sheet named "Late Biometric Punches" listing students who checked in late.
RF-1.3.5: The Excel file SHALL include a sheet named "Present Students per Room" listing the names of present students, sorted by Block, Floor, and Room.
RF-1.3.6: The Excel file SHALL include a sheet named "Absent Students per Room" listing the names of absent students, sorted by Block, Floor, and Room.
1.4 Notification
RF-1.4.1: The system SHALL send an automated notification to each student identified as "Not Present".
RF-1.4.2: The system SHALL support integration with a third-party messaging API (e.g., Twilio) for sending SMS or email alerts.
RF-1.4.3: The notification content SHALL be configurable and include relevant details such as the student's name and a reminder message.
2. Non-Functional Requirements
2.1 Performance
RN-2.1.1: The system SHALL process and generate the reports within 30 seconds for a file containing up to 500 records.
2.2 Reliability and Availability
RN-2.2.1: The system SHALL be scheduled to run once daily at a specific, predetermined time (e.g., 8:45 PM).
RN-2.2.2: The system SHALL handle cases where the daily CSV file is not present without crashing, and instead, log an appropriate message.
2.3 Security
RN-2.3.1: The system SHALL handle sensitive API keys and credentials securely.
RN-2.3.2: The system SHALL protect student data (e.g., phone numbers, names) by ensuring it is not publicly exposed in logs or reports beyond what is necessary for the intended function.
2.4 Usability
RN-2.4.1: The system SHALL not require manual intervention after the initial setup.
RN-2.4.2: The output reports SHALL be clearly organized and easy for administrators to understand.
2.5 Maintainability
RN-2.5.1: The code SHALL be well-documented with comments explaining the purpose of functions and key logic.
RN-2.5.2: The code structure SHALL be modular, allowing for easy updates or feature additions (e.g., changing the notification provider).
        

    
